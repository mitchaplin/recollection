// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
    provider  = "postgresql"
    url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String         @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    collections   Collection[]
    studySessions StudySession[]
    apples        Int            @default(0)
}

model StudySession {
    id             String   @id @default(cuid())
    createdAt      DateTime @default(now())
    duration       Int
    score          Int
    collectionName String
    collectionId   String
    userId         String
    User           User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model FlashCard {
    id           String     @id @default(cuid())
    question     String
    answer       String
    rank         Int        @default(0)
    Collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    collectionId String

    @@unique([collectionId, rank])
}

model Collection {
    id          String      @id @unique @default(cuid())
    name        String
    author      String      @default("You")
    description String      @default("No description")
    difficulty  Int         @default(5)
    category    String      @default("Other")
    cards       FlashCard[]

    // image        String?
    // attempts     Int
    // accuracy     Int
    // best         Int
    User   User   @relation(fields: [userId], references: [id])
    userId String
}
